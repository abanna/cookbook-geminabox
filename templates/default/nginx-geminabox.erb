upstream unicorn {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  # for UNIX domain socket setups:
  server unix:<%= @socket %> fail_timeout=0;

  # for TCP setups, point these to your backend servers
  # server 192.168.0.7:8080 fail_timeout=0;
  # server 192.168.0.8:8080 fail_timeout=0;
  # server 192.168.0.9:8080 fail_timeout=0;
}


server {
  listen 80;

  # If you have IPv6, you'll likely want to have two separate listeners.
  # One on IPv4 only (the default), and another on IPv6 only instead
  # of a single dual-stack listener.  A dual-stack listener will make
  # for ugly IPv4 addresses in $remote_addr (e.g ":ffff:10.0.0.1"
  # instead of just "10.0.0.1") and potentially trigger bugs in
  # some software.
  # listen [::]:80 ipv6only=on; # deferred or accept_filter recommended

  client_max_body_size 4G;
  server_name _;

  # ~2 seconds is often enough for most folks to parse HTML/CSS and
  # retrieve needed images/icons/frames, connections are cheap in
  # nginx so increasing this is generally safe...
  keepalive_timeout 5;

  # path for static files
  root <%= @root %>;

  <% if @ssl %>
  location / {
    rewrite ^/(.*)$ https://$host/$1 redirect;
  }
  <% else %>
  try_files $uri/index.html $uri.html $uri @app;
  location @app {
    # an HTTP header important enough to have its own Wikipedia entry:
    #   http://en.wikipedia.org/wiki/X-Forwarded-For
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # enable this if you forward HTTPS traffic to unicorn,
    # this helps Rack set the proper URL scheme for doing redirects:
    # proxy_set_header X-Forwarded-Proto $scheme;

    # pass the Host: header from the client right along so redirects
    # can be set properly within the Rack application
    proxy_set_header Host $http_host;

    # we don't want nginx trying to do something clever with
    # redirects, we set the Host: header above already.
    proxy_redirect off;

    # set "proxy_buffering off" *only* for Rainbows! when doing
    # Comet/long-poll/streaming.  It's also safe to set if you're using
    # only serving fast clients with Unicorn + nginx, but not slow
    # clients.  You normally want nginx to buffer responses to slow
    # clients, even with Rails 3.1 streaming because otherwise a slow
    # client can become a bottleneck of Unicorn.
    #
    # The Rack application may also set "X-Accel-Buffering (yes|no)"
    # in the response headers do disable/enable buffering on a
    # per-response basis.
    # proxy_buffering off;

    proxy_pass http://unicorn;
  }
  <% end %>

   location ^~ /assets/ {
    gzip_static on;
    expires max;
    add_header Cache-Control public;
  }

  <% if @auth_file %>
  auth_basic "Restricted Access";
  auth_basic_user_file <%= @auth_file %>;
  <% end %>

  error_page 500 502 503 504 /500.html;
}

  <% if @ssl %>
server {
  listen 443;
  server_name _;
  # path for static files
  root <%= @root %>;
  try_files $uri/index.html $uri.html $uri @app;
  
  location ^~ /assets/ {
    gzip_static on;
    expires max;
    add_header Cache-Control public;
  }
  <% if @auth_file %>
  auth_basic "Restricted Access";
  auth_basic_user_file <%= @auth_file %>;
  <% end %>
  location @app {
    proxy_redirect off;
    proxy_set_header Host $http_host;
    proxy_set_header X-Forwarded-Proto https;
    proxy_pass http://unicorn;
  }

  ssl on;
  ssl_certificate <%= @ssl_cert %>;
  ssl_certificate_key <%= @ssl_key %>;
  ssl_ciphers HIGH;
  ssl_protocols SSLv3 TLSv1;
  ssl_prefer_server_ciphers on;

   error_page 500 502 503 504 /500.html;
}
<% end %>
